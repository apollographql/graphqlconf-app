schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/connect/v0.2", for: EXECUTION)
  @join__directive(graphs: [GITHUB], name: "link", args: {url: "https://specs.apollo.dev/connect/v0.2", import: ["@connect", "@source"]})
  @join__directive(graphs: [GITHUB], name: "source", args: {name: "github", http: {baseURL: "https://graphql.github.io/", headers: [{name: "Accept", value: "application/vnd.github.json+json"}]}})
{
  query: Query
}

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String, contextArguments: [join__ContextArgument!]) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

scalar join__FieldSet

scalar join__FieldValue

enum join__Graph {
  GITHUB @join__graph(name: "github", url: "http://ignore")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: GITHUB)
{
  schedule_2025: [SchedSession!] @join__directive(graphs: [GITHUB], name: "connect", args: {source: "github", http: {GET: "scripts/sync-sched/schedule-2025.json"}, selection: "id\nactive\npinned\nname\ndescription\ninvite_only\ngoers\nseats\nevent: {\n  key: event_key\n  start: event_start\n  end: event_end\n  start_year: event_start_year\n  start_month: event_start_month\n  start_month_short: event_start_month_short\n  start_day: event_start_day\n  start_weekday: event_start_weekday\n  start_weekday_short: event_start_weekday_short\n  start_time: event_start_time\n  start_date: start_date\n  end_year: event_end_year\n  end_month: event_end_month\n  end_month_short: event_end_month_short\n  end_day: event_end_day\n  end_weekday: event_end_weekday\n  end_weekday_short: event_end_weekday_short\n  end_time: event_end_time\n  end_date: end_date\n  type: event_type\n  subtype: event_subtype\n  timezone: $(\"Europe/Amsterdam\")\n  start_time_epoch: start_time_ts\n}\nvenue: {\n  id: venue_id\n  name: venue\n}\nspeakers {\n  username\n  name\n  about\n  position\n  company\n  avatar\n  years: _years\n  custom_order\n}"})
  speakers: [SchedSpeaker!] @join__directive(graphs: [GITHUB], name: "connect", args: {source: "github", http: {GET: "scripts/sync-sched/speakers.json"}, selection: "$.speakers {\n  username\n  name\n  about\n  position\n  company\n  avatar\n  years: _years\n  custom_order\n}"})
}

type SchedEvent
  @join__type(graph: GITHUB)
{
  key: String!
  start: String
  end: String
  start_year: String
  start_month: String
  start_month_short: String
  start_day: String
  start_weekday: String
  start_weekday_short: String
  start_time: String
  start_date: String
  end_year: String
  end_month: String
  end_month_short: String
  end_day: String
  end_weekday: String
  end_weekday_short: String
  end_time: String
  end_date: String
  type: String
  subtype: String
  timezone: String!
  start_time_epoch: Int
}

type SchedSession
  @join__type(graph: GITHUB)
{
  id: String!
  active: String
  pinned: String
  name: String
  description: String
  invite_only: String
  goers: String
  seats: String
  event: SchedEvent
  venue: SchedVenue
  speakers: [SchedSpeaker!]
}

type SchedSpeaker
  @join__type(graph: GITHUB)
{
  username: String!
  name: String
  about: String
  position: String
  company: String
  avatar: String
  years: [Int!]
  custom_order: Int
}

type SchedVenue
  @join__type(graph: GITHUB)
{
  id: String!
  name: String
}