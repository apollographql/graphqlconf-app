# This schema uses Apollo Connectors, a declarative programming model for
# GraphQL that allows you to plug in your existing REST services directly into
# a graph. To learn more, visit Apollo's documentation: ðŸ”—https://www.apollographql.com/docs/graphos/schema-design/connectors

extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.10") # Enable this schema to use Apollo Federation features
  @link( # Enable this schema to use Apollo Connectors
    url: "https://specs.apollo.dev/connect/v0.3"
    import: ["@connect", "@source"]
  )
  @source(name: "conf", http: { baseURL: "http://localhost:8081/api/conf/" })

type Query {
  events(
    year: String
    ids: [String!]
    nameLike: String
    descriptionLike: String
    venueId: String
    start: Int
    end: Int
    limit: Int
  ): [SchedSession!]!
    @connect(
      source: "conf"
      http: {
        GET: "events"
        queryParams: """
        year: $args.year
        id: $args.ids
        name_like: $args.nameLike
        description_like: $args.descriptionLike
        venue_id: $args.venueId
        _start: $args.start
        _end: $args.end
        _limit: $args.limit
        """
      }
      selection: """
      id
      event_key
      active
      pinned
      name
      description
      goers
      seats
      audience
      invite_only
      type
      subtype
      start_time_ts
      start_date
      start_time
      end_date
      end_time
      year
      video_stream
      venue: venue_id? { id: $ }
      speakers: speaker_id->map({id: @}) {id}
      files {
        path
        name
      }
      """
    )

  speakers(
    ids: [String!]
    company: String
    username: String
    nameLike: String
  ): [SchedSpeaker!]
    @connect(
      source: "conf"
      http: {
        GET: "speakers"
        queryParams: """
        id: $args.ids
        company: $args.company
        username: $args.username
        name_like: $args.nameLike
        """
      }
      selection: """
      ${
        id
        username
        name
        about
        position
        location
        url
        company
        avatar
        socialurls {
          service
          url
        }
        years: _years
      }
      """
    )

  venues(ids: [String!], nameLike: String): [SchedVenue!]!
    @connect(
      source: "conf"
      http: {
        GET: "venues"
        queryParams: """
        id: $args.ids
        name_like: $args.nameLike
        """
      }
      selection: """
      id
      name
      """
    )
}

enum YN {
  Y
  N
}

type SchedSession {
  id: String!
  event_key: String!
  active: YN!
  pinned: YN!
  name: String!
  description: String!
  goers: Int
  seats: Int
  audience: String
  invite_only: YN!
  type: String!
  subtype: String
  start_time_ts: Int
  start_date: String!
  start_time: String!
  end_date: String!
  end_time: String!
  year: String!
  video_stream: String
  venue: SchedVenue
  speakers: [SchedSpeaker!]!
  files: [File!]!
}

type File {
  path: String!
  name: String!
}

type SchedVenue
  @connect(
    source: "conf"
    http: { GET: "venues", queryParams: "id: $batch.id" }
    selection: """
    id
    name
    """
  ) {
  id: String!
  name: String
}

type SchedSpeaker
  @connect(
    source: "conf"
    http: { GET: "speakers", queryParams: "id: $batch.id" }
    selection: """
    ${
      id
      username
      name
      about
      position
      location
      url
      company
      avatar
      socialurls {
        service
        url
      }
      years: _years
    }
    """
  ) {
  id: String!
  username: String!
  company: String!
  position: String!
  name: String!
  about: String!
  location: String!
  url: String!
  avatar: String!
  socialurls: [SocialUrl!]!
  years: [Int!]
}

type SocialUrl {
  service: String!
  url: String!
}
